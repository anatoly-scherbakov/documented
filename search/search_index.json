{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>documented</code>","text":"<p>Templated docstrings for Python classes.</p>"},{"location":"#example","title":"Example","text":"<p>examples/open-the-pod-bay-doors.py</p> <pre><code>from dataclasses import dataclass\n\nfrom documented import Documented, DocumentedError\n\n\n@dataclass\nclass PodBayDoorsStillClosed(DocumentedError):\n    \"\"\"\n    I\u2019m sorry, {self.user_name}.\n\n    I\u2019m afraid I can\u2019t do that.\n    \"\"\"\n\n    user_name: str\n\n\nclass OpenThePodBayDoors(Documented):\n    \"\"\"Open the pod bay doors please, HAL.\"\"\"\n\n\nprint(OpenThePodBayDoors())\nraise PodBayDoorsStillClosed(user_name='Dave')\n</code></pre> <p>python</p> <pre><code>Open the pod bay doors please, HAL.\n\nTraceback (most recent call last):\n  File \"\ud83d\udcc2/open-the-pod-bay-doors.py\", line 22, in &lt;module&gt;\n    raise PodBayDoorsStillClosed(user_name='Dave')\nPodBayDoorsStillClosed: I\u2019m sorry, Dave.\n\nI\u2019m afraid I can\u2019t do that.\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p><code>documented</code> is on  PyPI.</p> pip poetrypipenvpdm conda <pre><code>pip install documented\n</code></pre> <pre><code>poetry add documented\n</code></pre> <pre><code>pipenv install documented\n</code></pre> <pre><code>pdm add documented\n</code></pre> <pre><code>conda install -c conda-forge documented\n</code></pre>"},{"location":"#flow","title":"Flow","text":"<pre><code>graph TD\n    docstring(\"Class \ud83d\udcdd &lt;code&gt;docstring&lt;/code&gt;\") --&gt; dedent(\"\u21a4 dedent\")\n    dedent --&gt; C(\"\u270f\ufe0f Interpolate&lt;br&gt;&lt;code&gt;{self.placeholders}&lt;/code&gt;\")\n    C --&gt; str(\"&lt;code&gt;__str__()&lt;/code&gt;\")\n    str -- \"for&lt;br&gt;&lt;code&gt;DocumentedError&lt;/code&gt;\" --&gt; raise(\"\ud83d\udca5 raise\")\n    str -- \"for&lt;br&gt;&lt;code&gt;Documented&lt;/code&gt;\" --&gt; print(\"\ud83d\udda8\ufe0f print | log\")\n    print --&gt; rich(\"as Markdown \u2192 console&lt;br&gt;with \ud83d\udda5\ufe0f &lt;code&gt;rich&lt;/code&gt;\")\n    raise --&gt; try(\"\ud83c\udfc0 try \u2026 except\")\n    raise -- Stacktrace --&gt; print\n    try --&gt; print\n\n    style raise stroke:#CC0000\n    click dedent \"https://docs.python.org/3/library/textwrap.html#textwrap.dedent\"\n    click C \"templating/\"\n    click rich \"compatibility/rich/\"\n    click str \"https://docs.python.org/3/reference/datamodel.html#object.__str__\"\n    click try \"try-except/\"\n    click docstring \"docstring/\"\n</code></pre>"},{"location":"#used-by","title":"Used by","text":"<p>The asterisk  below denotes projects which are mine </p> <p>iolanta</p> <p>Linked Data workspace </p> <p>jeeves</p> <p>Pythonic alternative to Make </p> <p>Know more?</p> <p> Submit an issue!</p> <p></p>"},{"location":"#lets-talk","title":"Let's talk","text":"<p>Bug? Feature request?</p> <p> Submit an issue!</p> <p>Anything else?</p> <p>See my site:  yeti.sh</p> <p></p>"},{"location":"#publications","title":"Publications","text":"<ul> <li><code>documented</code>: make docstrings in your exceptions work</li> </ul>"},{"location":"alternatives/","title":"\ud83d\udd00 Alternatives","text":"<p>Know any other alternative?</p> <p> Submit an issue!</p> Language Notes <code>thiserror</code>  Rust Formats error messages just like <code>documented</code> does"},{"location":"docstring/","title":"\ud83d\udcdd <code>\"\"\"Docstring\"\"\"</code>","text":"<p>Having installed <code>documented</code>, you can use <code>DocumentedError</code> as base for your custom exception classes. The immediate effect of that is that raising these exceptions will print their docstrings in the stack trace.</p> <p>examples/docstring.py</p> <pre><code>from documented import DocumentedError\n\n\nclass HALHasGoneCrazy(DocumentedError):\n    \"\"\"\n    Something is amiss.\n\n    It would seem that HAL9000 has gone crazy!\n    \"\"\"\n\nraise HALHasGoneCrazy()\n</code></pre> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/docstring.py\", line 11, in &lt;module&gt;\n    raise HALHasGoneCrazy()\nHALHasGoneCrazy: Something is amiss.\n\nIt would seem that HAL9000 has gone crazy!\n</code></pre>"},{"location":"docstring/#styling-recommendations","title":"Styling Recommendations","text":"<ul> <li>Create your own exception classes in terms of your domain, to play a part in your business logic, instead of using built-in <code>Exception</code> or <code>ValueError</code>.</li> <li>Refrain from using the word <code>Exception</code> or <code>Error</code> in their names.</li> <li>A good IDE can convey the information that something is an exception;</li> <li>Even discarding that, seeing <code>raise FooBarBaz</code> is sufficient to understand what kind of guy <code>FooBarBaz</code> is.</li> </ul>"},{"location":"docstring/#good","title":"Good","text":"<ul> <li> <code>BalanceInsufficient</code></li> <li> <code>PlanetNotFound</code></li> <li> <code>TetOffline</code></li> <li> <code>OrderDeclined</code></li> </ul>"},{"location":"docstring/#not-so-good","title":"Not so good","text":"<ul> <li> <code>BalanceInsufficientError</code></li> <li> <code>PlanetNotFoundException</code></li> <li> <code>CatastrophicalError</code></li> <li> <code>UnknownError</code></li> </ul>"},{"location":"fallback/","title":"\ud83d\udd19 Fallback mode","text":"<p>If either:</p> <ul> <li>the docstring for a <code>Documented</code> class is not provided,</li> <li>or it is stripped by the <code>-OO</code> mode</li> </ul> <p>then we will output the object's <code>repr()</code> instead.</p>"},{"location":"templating/","title":"Templating","text":"<p><code>{self.something}</code> templating pieces will be interpolated when rendering the exception value. </p> <p>examples/open-the-pod-bay-doors.py</p> <pre><code>from dataclasses import dataclass\n\nfrom documented import Documented, DocumentedError\n\n\n@dataclass\nclass PodBayDoorsStillClosed(DocumentedError):\n    \"\"\"\n    I\u2019m sorry, {self.user_name}.\n\n    I\u2019m afraid I can\u2019t do that.\n    \"\"\"\n\n    user_name: str\n\n\nclass OpenThePodBayDoors(Documented):\n    \"\"\"Open the pod bay doors please, HAL.\"\"\"\n\n\nprint(OpenThePodBayDoors())\nraise PodBayDoorsStillClosed(user_name='Dave')\n</code></pre> <p>python</p> <pre><code>Open the pod bay doors please, HAL.\n\nTraceback (most recent call last):\n  File \"\ud83d\udcc2/open-the-pod-bay-doors.py\", line 22, in &lt;module&gt;\n    raise PodBayDoorsStillClosed(user_name='Dave')\nPodBayDoorsStillClosed: I\u2019m sorry, Dave.\n\nI\u2019m afraid I can\u2019t do that.\n</code></pre> <ul> <li><code>textwrap.dedent()</code> is applied to the result, thus Python indentation rules do not corrupt the resulting message.</li> <li> <p>Template rendering is done using <code>str.format()</code>. That function receives the object instance as <code>self</code> keyword argument.</p> <p>You can also access elements of lists and dicts by index, for example: <code>{self.countries[US]}</code>, but I wouldn't recommend that. Use a property instead (see below).</p> </li> </ul>"},{"location":"templating/#dynamic-content","title":"Dynamic content","text":"<p>From template, you can't call methods of the object, but you can access its fields and properties. You might find useful:</p> <ul> <li><code>@property</code></li> <li>or, <code>@cached_property</code> for performance<ul> <li>This function is only available since Python 3.8,</li> <li>There is a backport available though.</li> </ul> </li> </ul>"},{"location":"templating/#dataclasses","title":"Dataclasses","text":"<p>Dataclasses are used in this example in order to provide the astronaut's name to the exception in the most convenient way. You can</p> <ul> <li>opt out of using them if you wish,</li> <li>or use <code>attrs</code> instead,</li> <li>or maybe substitute them with pydantic dataclasses.</li> </ul>"},{"location":"templating/#error-while-rendering","title":"Error while rendering","text":"<p>If there is an error while rendering the exception then you will see something like this:</p> <p>examples/not_renderable.py</p> <pre><code>from documented import DocumentedError\n\n\nclass NotRenderable(DocumentedError):\n    \"\"\"\n    This exception is not renderable.\n\n    {self.no_hope}\n    \"\"\"\n\n    @property\n    def no_hope(self):\n        return str(1 / 0)\n\n\nraise NotRenderable()\n</code></pre> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/not_renderable.py\", line 16, in &lt;module&gt;\n    raise NotRenderable()\nNotRenderableCould not print a NotRenderable object.\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"\ud83d\udcc2/not_renderable.py\", line 13, in no_hope\n    return str(1 / 0)\n               ~~^~~\nZeroDivisionError: division by zero\n: &lt;exception str() failed&gt;\n</code></pre>"},{"location":"try-except/","title":"<code>try</code>\u2026<code>except</code>","text":"<pre><code>graph TD\n    catch(\"Why to catch an exception&lt;br&gt;you have thrown elsewhere?\") -- \"Catching&lt;br&gt;any exception\" --&gt; any(\"Log the error, maybe\")\n    catch -- \"Catch specific&lt;br&gt;exception(s) only\" --&gt; flow(\"&lt;font color=white&gt;Use the exception&lt;br&gt;to change how the system behaves&lt;/font&gt;\")\n\n    style flow fill:#526cfe</code></pre> <p>Read more on this</p> <p> Exceptions as Control Flow</p> <p>Python <code>except</code> construct allows to manage how the application behaves depending on which exception has been raised. <code>documented</code> stimulates to add fields and properties to your exception classes, which you can neatly use in <code>except</code> clauses:</p> <pre><code>try:\n    hal.do_stuff()\nexcept HALHasGoneCrazy as err:\n    if err.is_moebius_cycle:\n        hal.turn_off()\n    else:\n        hal.self_check()\n</code></pre>"},{"location":"compatibility/-OO/","title":"\ud83d\udd34 python -OO","text":"<p>As the reference states, <code>-OO</code> mode will discard the docstrings.</p> <pre><code>python -OO script.py\n</code></pre> <p>examples/wizardry.py</p> <pre><code>from dataclasses import dataclass\nfrom documented import DocumentedError\n\n\n@dataclass   # (1)!\nclass InsufficientWizardryLevel(DocumentedError):\n    \"\"\"\n    \ud83e\uddd9 Your level of wizardry is insufficient \u2639\n\n        Spell: {self.spell}\n        Minimum level required: {self.required_level}\n        Actual level: {self.actual_level} {self.comment}\n\n    Unseen University will be happy to assist in your training! \ud83c\udf93\n    \"\"\"   # (2)!\n\n    spell: str\n    required_level: int\n    actual_level: int\n\n    @property   # (3)!\n    def comment(self) -&gt; str:\n        if self.actual_level &lt;= 0:\n            return '(You are Rincewind, right? Hi!)'\n        else:\n            return ''\n\n\nraise InsufficientWizardryLevel(\n    spell='Animal transformation',\n    required_level=8,\n    actual_level=0,\n)\n</code></pre> <ol> <li> <p>Usage of <code>dataclasses</code> is not required but helps alleviate boilerplate.</p> </li> <li> <p>Docstring is used to render the exception. More than that, you can render fields of the exception instance in it using <code>{self.something}</code> placeholders.</p> </li> <li> <p>You cannot call methods of the exception instance. But you can refer to properties to help generate dynamic content.</p> </li> </ol> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/wizardry.py\", line 29, in &lt;module&gt;\n    raise InsufficientWizardryLevel(\nInsufficientWizardryLevel: InsufficientWizardryLevel(spell: str, required_level: int, actual_level: int)\n</code></pre> <p>As you can see, the Fallback <code>__repr__</code> mode is used in this case.</p>"},{"location":"compatibility/attrs/","title":"\ud83d\udfe2 attrs","text":"<p>examples/attrs_exception.py</p> <pre><code>from attrs import define\n\nfrom documented import DocumentedError\n\n\n@define\nclass DeathStarHasExploded(DocumentedError):\n    \"\"\"\n    This Death Star has exploded.\n\n    You will have to build a new one, {self.user}\n    \"\"\"\n\n    user: str\n\n\nraise DeathStarHasExploded(user='Darth')\n</code></pre> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/attrs_exception.py\", line 17, in &lt;module&gt;\n    raise DeathStarHasExploded(user='Darth')\nDeathStarHasExploded: This Death Star has exploded.\n\nYou will have to build a new one, Darth\n</code></pre>"},{"location":"compatibility/dataclasses/","title":"\ud83d\udfe2 dataclasses","text":"<p>I am mostly wrapping subclasses of <code>DocumentedError</code> into <code>@dataclass</code> decorator. See an example on the home page of the documentation site.</p>"},{"location":"compatibility/flake8-docstrings/","title":"\ud83d\udfe2 flake8-docstrings","text":"<p>Verify the docstrings you write with flake8-docstrings.</p>"},{"location":"compatibility/pydantic/","title":"\ud83d\udfe1 pydantic","text":"<p>Idea</p> <p> pydantic/pydantic#1875</p> <ul> <li> Pydantic models will raise an error if to try to inherit them from <code>Exception</code> and then <code>raise</code>,</li> <li> but we can use Pydantic <code>dataclasses</code> instead.</li> </ul> <p>examples/pydantic_exception.py</p> <pre><code>from pydantic.dataclasses import dataclass as pydantic_dataclass\n\nfrom documented import DocumentedError\n\n\n@pydantic_dataclass\nclass PydanticError(DocumentedError):\n    \"\"\"\n    Incorrect answer!\n\n    (To the Question of Life, Universe, and Everything.)\n\n        - Answer given: {self.answer}\n        - Correct answer: indubitably 42.\n    \"\"\"\n\n    answer: str\n\n\nraise PydanticError(answer='bebebe')\n</code></pre> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/pydantic_exception.py\", line 20, in &lt;module&gt;\n    raise PydanticError(answer='bebebe')\nPydanticError: Incorrect answer!\n\n(To the Question of Life, Universe, and Everything.)\n\n    - Answer given: bebebe\n    - Correct answer: indubitably 42.\n</code></pre>"},{"location":"compatibility/rich/","title":"\ud83d\udfe1 rich","text":""},{"location":"compatibility/rich/#documented","title":"\ud83d\udfe2 <code>Documented</code>","text":"<p>examples/rich-markdown.py</p> <pre><code>import rich\nfrom documented import Documented\n\n\nclass MyMessage(Documented):\n    \"\"\"\n    # This is a Markdown formatted message.\n\n    * _One_,\n    * *Two*,\n    * `Three`\n\n    and **more** features of Markdown\n\n    &gt; are supported.\n    \"\"\"\n\n\nrich.print(MyMessage())\n</code></pre> <p>python</p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                    This is a Markdown formatted message.                     \u2503\n\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n\n \u2022 One,                                                                         \n \u2022 Two,                                                                         \n \u2022 Three                                                                        \n\nand more features of Markdown                                                   \n\n\u258c are supported.                                                              \n</code></pre> <p>This will render the docstring as Markdown in the console.</p>"},{"location":"compatibility/rich/#documentederror","title":"\ud83d\udfe1 <code>DocumentedError</code>","text":"<p>See related thread</p> <p> textualize/rich#2619</p> <ul> <li> <p> I haven't found a way to integrate  rich with <code>documented</code> directly, to render beautiful exceptions with console markup or Markdown text in them right in the traceback.</p> </li> <li> <p> However, this can always be done manually:</p> <ul> <li><code>except</code> the error,</li> <li>and <code>rich.print()</code> it.</li> </ul> </li> </ul>"},{"location":"compatibility/self/","title":"\ud83d\udd34 {self}","text":"<p>Using plain <code>{self}</code> in the docstring will cause a recursion. As well as something like this:</p> <p>examples/recursion.py</p> <pre><code>import sys\n\nfrom documented import DocumentedError\n\nsys.setrecursionlimit(30)\n\n\nclass Recursion(DocumentedError):\n    \"\"\"\n    This exception is a bugger.\n\n    It will crash when rendering {self.recursive_property}.\n    \"\"\"\n\n    @property\n    def recursive_property(self):\n        return self\n\n\nraise Recursion()\n</code></pre> <p>python</p> <pre><code>Traceback (most recent call last):\n  File \"\ud83d\udcc2/recursion.py\", line 20, in &lt;module&gt;\n    raise Recursion()\nRecursionCould not print a Recursion object.\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 13, in __str__\n    template = self.__docstring_template()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 32, in __docstring_template\n    return textwrap.dedent(\n           ^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/textwrap.py\", line 466, in dedent\n    text = re.sub(r'(?m)^' + margin, '', text)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/re/__init__.py\", line 185, in sub\n    return _compile(pattern, flags).sub(repl, string, count)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nRecursionError: maximum recursion depth exceeded\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 25, in __str__\n    logger.exception(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1524, in exception\n    self.error(msg, *args, exc_info=exc_info, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1518, in error\n    self._log(ERROR, msg, args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1632, in _log\n    record = self.makeRecord(self.name, level, fn, lno, msg, args,\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1601, in makeRecord\n    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 322, in __init__\n    self.levelname = getLevelName(level)\n                     ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 142, in getLevelName\n    result = _levelToName.get(level)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 25, in __str__\n    logger.exception(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1524, in exception\n    self.error(msg, *args, exc_info=exc_info, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1518, in error\n    self._log(ERROR, msg, args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1634, in _log\n    self.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1644, in handle\n    self.callHandlers(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1714, in callHandlers\n    lastResort.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 978, in handle\n    self.emit(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1110, in emit\n    msg = self.format(record)\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 953, in format\n    return fmt.format(record)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 688, in format\n    if self.usesTime():\n       ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 656, in usesTime\n    return self._style.usesTime()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 433, in usesTime\n    return self._fmt.find(self.asctime_search) &gt;= 0\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 25, in __str__\n    logger.exception(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1524, in exception\n    self.error(msg, *args, exc_info=exc_info, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1518, in error\n    self._log(ERROR, msg, args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1634, in _log\n    self.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1644, in handle\n    self.callHandlers(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1714, in callHandlers\n    lastResort.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 978, in handle\n    self.emit(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1110, in emit\n    msg = self.format(record)\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 953, in format\n    return fmt.format(record)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 695, in format\n    record.exc_text = self.formatException(record.exc_info)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 645, in formatException\n    traceback.print_exception(ei[0], ei[1], tb, None, sio)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 124, in print_exception\n    te = TracebackException(type(value), value, tb, limit=limit, compact=True)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 702, in __init__\n    self.stack = StackSummary._extract_from_extended_frame_gen(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 405, in _extract_from_extended_frame_gen\n    limit = getattr(sys, 'tracebacklimit', None)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 25, in __str__\n    logger.exception(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1524, in exception\n    self.error(msg, *args, exc_info=exc_info, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1518, in error\n    self._log(ERROR, msg, args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1634, in _log\n    self.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1644, in handle\n    self.callHandlers(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1714, in callHandlers\n    lastResort.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 978, in handle\n    self.emit(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1110, in emit\n    msg = self.format(record)\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 953, in format\n    return fmt.format(record)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 695, in format\n    record.exc_text = self.formatException(record.exc_info)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 645, in formatException\n    traceback.print_exception(ei[0], ei[1], tb, None, sio)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 124, in print_exception\n    te = TracebackException(type(value), value, tb, limit=limit, compact=True)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 702, in __init__\n    self.stack = StackSummary._extract_from_extended_frame_gen(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 436, in _extract_from_extended_frame_gen\n    f.line\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 321, in line\n    self._line = linecache.getline(self.filename, self.lineno)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 30, in getline\n    lines = getlines(filename, module_globals)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 46, in getlines\n    return updatecache(filename, module_globals)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 136, in updatecache\n    with tokenize.open(fullname) as fp:\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/tokenize.py\", line 396, in open\n    buffer = _builtin_open(filename, 'rb')\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 22, in __str__\n    return template.format(self=self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/documented/documented/documented/documented.py\", line 25, in __str__\n    logger.exception(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1524, in exception\n    self.error(msg, *args, exc_info=exc_info, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1518, in error\n    self._log(ERROR, msg, args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1634, in _log\n    self.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1644, in handle\n    self.callHandlers(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1714, in callHandlers\n    lastResort.handle(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 978, in handle\n    self.emit(record)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 1110, in emit\n    msg = self.format(record)\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 953, in format\n    return fmt.format(record)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 695, in format\n    record.exc_text = self.formatException(record.exc_info)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/logging/__init__.py\", line 645, in formatException\n    traceback.print_exception(ei[0], ei[1], tb, None, sio)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 124, in print_exception\n    te = TracebackException(type(value), value, tb, limit=limit, compact=True)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 702, in __init__\n    self.stack = StackSummary._extract_from_extended_frame_gen(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 436, in _extract_from_extended_frame_gen\n    f.line\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/traceback.py\", line 321, in line\n    self._line = linecache.getline(self.filename, self.lineno)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 30, in getline\n    lines = getlines(filename, module_globals)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 46, in getlines\n    return updatecache(filename, module_globals)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/linecache.py\", line 136, in updatecache\n    with tokenize.open(fullname) as fp:\nRecursionError: maximum recursion depth exceeded while calling a Python object\n: &lt;exception str() failed&gt;\n</code></pre> <p>So please do not do that</p> <p>We could have filtered out the plain call to <code>{self}</code> but we're unable to do so for more involved cases as illustrated above, so for now we are keeping it as it is.</p>"},{"location":"reference/documented-error/","title":"DocumentedError","text":"<p>             Bases: <code>Documented</code>, <code>Exception</code></p> <p>Exception with a templated error message provided as the docstring.</p> Source code in <code>documented/error.py</code> <pre><code>class DocumentedError(Documented, Exception):\n    \"\"\"Exception with a templated error message provided as the docstring.\"\"\"\n</code></pre>"},{"location":"reference/documented/","title":"Documented","text":"<p>Base class</p> <p>You can inherit your classes from <code>Documented</code>, it won't be an exception like it is the case for <code>DocumentedError</code> but it will still render your docstring as <code>__str__</code>. I use this to catalogue messages in console applications, for example. </p> <p>Class with a templated docstring.</p> Source code in <code>documented/documented.py</code> <pre><code>class Documented:\n    \"\"\"Class with a templated docstring.\"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"Format and return the docstring.\"\"\"\n        template = self.__docstring_template()\n\n        # This call can access properties of `self` and, therefore, execute\n        # user's arbitrary code. We have to catch any exceptions that\n        # may ensue, and log them.\n        # If we do not do so, the user will only see something like this:\n        #\n        #     &lt;unprintable Documented object&gt;\n        try:\n            return template.format(self=self)\n\n        except Exception:\n            logger.exception(\n                f'Could not print a {self.__class__.__name__} object.',\n            )\n            raise\n\n    def __docstring_template(self) -&gt; str:  # noqa: WPS112\n        \"\"\"Preformat the message template.\"\"\"\n        return textwrap.dedent(\n            self.__doc__ or repr(self),\n        ).strip('\\n')\n\n    def __rich__(self):\n        \"\"\"Represent the object as Markdown.\"\"\"\n        return Markdown(str(self))\n</code></pre>"},{"location":"reference/documented/#documented.Documented.__docstring_template","title":"<code>__docstring_template()</code>","text":"<p>Preformat the message template.</p> Source code in <code>documented/documented.py</code> <pre><code>def __docstring_template(self) -&gt; str:  # noqa: WPS112\n    \"\"\"Preformat the message template.\"\"\"\n    return textwrap.dedent(\n        self.__doc__ or repr(self),\n    ).strip('\\n')\n</code></pre>"},{"location":"reference/documented/#documented.Documented.__rich__","title":"<code>__rich__()</code>","text":"<p>Represent the object as Markdown.</p> Source code in <code>documented/documented.py</code> <pre><code>def __rich__(self):\n    \"\"\"Represent the object as Markdown.\"\"\"\n    return Markdown(str(self))\n</code></pre>"},{"location":"reference/documented/#documented.Documented.__str__","title":"<code>__str__()</code>","text":"<p>Format and return the docstring.</p> Source code in <code>documented/documented.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Format and return the docstring.\"\"\"\n    template = self.__docstring_template()\n\n    # This call can access properties of `self` and, therefore, execute\n    # user's arbitrary code. We have to catch any exceptions that\n    # may ensue, and log them.\n    # If we do not do so, the user will only see something like this:\n    #\n    #     &lt;unprintable Documented object&gt;\n    try:\n        return template.format(self=self)\n\n    except Exception:\n        logger.exception(\n            f'Could not print a {self.__class__.__name__} object.',\n        )\n        raise\n</code></pre>"}]}